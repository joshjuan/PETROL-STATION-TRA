<?php

namespace frontend\controllers;

use frontend\models\RenewLicence;
use Yii;
use frontend\models\ValidLicence;
use frontend\models\ValidLicenceSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * ValidLicenceController implements the CRUD actions for ValidLicence model.
 */
class ValidLicenceController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
    public function beforeAction($action)
    {
        if (Yii::$app->user->isGuest) {
            return $this->redirect(['site/login'])->send();  // login path
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    /**
     * Lists all ValidLicence models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new ValidLicenceSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionToExpire()
    {
        $searchModel = new ValidLicenceSearch();
        $dataProvider = $searchModel->searchToExpire(Yii::$app->request->queryParams);

        return $this->render('indexToExpire', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single ValidLicence model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new ValidLicence model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new ValidLicence();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing ValidLicence model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    public function actionRenew($id)
    {
        $model = $this->findModel($id);

        $active_licence = new RenewLicence();
        $active_licence->valid_licence_id = $model->id;
        $active_licence->activation_date = date('Y-m-d');
        $active_licence->expired_date = date('Y-m-d', strtotime('+1 year'));
        $active_licence->created_at = date('Y-m-d H:i:s');
        $active_licence->created_by = Yii::$app->user->identity->getId();
        $active_licence->status=0;

        $active_licence->save();
        ValidLicence::updateAll(['status'=>1],['id'=>$model->id]);

        Yii::$app->session->setFlash('', [
            'type' => 'success',
            'duration' => 7000,
            'icon' => 'fa fa-warning',
            'title' => 'Notification',
            'message' => 'Company licence successfully renewed and licence activated up to date '. $active_licence->expired_date,
            'positonY' => 'top',
            'positonX' => 'right'
        ]);


        return $this->redirect(['valid-licence/index']);
    }

    /**
     * Deletes an existing ValidLicence model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
       // $this->findModel($id)->delete();

      //  return $this->redirect(['index']);
    }

    /**
     * Finds the ValidLicence model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return ValidLicence the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = ValidLicence::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
